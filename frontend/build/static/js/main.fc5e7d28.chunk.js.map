{"version":3,"sources":["util/interact.js","Minter.js","App.js","reportWebVitals.js","index.js"],"names":["require","config","contractABI","contractAddress","process","web3","createAlchemyWeb3","connectWallet","a","window","ethereum","request","method","addressArray","obj","status","address","message","target","rel","href","getCurrentWalletConnected","length","mintNFT","_mintAmount","eth","Contract","contract","mintCost","selectedAddress","toString","transactionParameters","to","from","data","methods","mint","encodeABI","value","parseInt","utils","toWei","params","txHash","success","handleRevert","Minter","useState","walletAddress","setWallet","tokensMinted","setTokensMinted","setStatus","transactionStatus","setTransactionStatus","transactionURL","setTransactionURL","transactionURLTxt","setTransactionURLTxt","addWalletListener","on","accounts","document","getElementById","disabled","useEffect","connectWalletPressed","walletResponse","wait","ms","Promise","resolve","setTimeout","numberWithCommas","x","replace","onMintPressed","alert","innerHTML","mintNFTResponse","i","getTransactionReceipt","txReceipt","secondsPassed","console","log","tokenIdArr","tokenId","push","lastIndex","style","color","Fragment","className","id","onClick","String","substring","htmlFor","name","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.fc5e7d28.chunk.js","sourcesContent":["require('dotenv').config();\nconst alchemyKey = process.env.REACT_APP_ALCHEMY_KEY;\nconst contractABI = require('../contract-abi.json');\nconst contractAddress = process.env.REACT_APP_CONTRACT_ADDRESS;\nconst { createAlchemyWeb3 } = require('@alch/alchemy-web3');\n// Alchemy Web 3 is a wrapper around Web3.js providing enchanced API methods\nconst web3 = createAlchemyWeb3(alchemyKey);\n\nexport const connectWallet = async () => {\n\t// window.ethereum is a global API injected by Metamask and other wallet providers that allows websites to request users' Ethereum accounts\n\t// if approved, it can read data from the blockchains the user is connected to, and suggest that the user sign messages and transactions\n\tif (window.ethereum) {\n\t\ttry {\n\t\t\tconst addressArray = await window.ethereum.request({\n\t\t\t\t// eth_requestAccounts opens up Metamask in the browser\n\t\t\t\tmethod: 'eth_requestAccounts',\n\t\t\t});\n\t\t\tconst obj = {\n\t\t\t\tstatus: '👆🏽 Click above to get your BitBird NFT',\n\t\t\t\taddress: addressArray[0],\n\t\t\t};\n\t\t\treturn obj;\n\t\t} catch (err) {\n\t\t\treturn {\n\t\t\t\taddress: '',\n\t\t\t\tstatus: '😥 ' + err.message,\n\t\t\t};\n\t\t}\n\t}\n\t// window.ethereum is not present that means metamask is not installed\n\telse {\n\t\treturn {\n\t\t\taddress: '',\n\t\t\tstatus: (\n\t\t\t\t<span>\n\t\t\t\t\t<p>\n\t\t\t\t\t\t{' '}\n\t\t\t\t\t\t🦊{' '}\n\t\t\t\t\t\t<a target='_blank' rel='noreferrer' href={`https://metamask.io/download.html`}>\n\t\t\t\t\t\t\tYou need to download MetaMask.\n\t\t\t\t\t\t</a>\n\t\t\t\t\t</p>\n\t\t\t\t</span>\n\t\t\t),\n\t\t};\n\t}\n};\n\n// similar to function above\nexport const getCurrentWalletConnected = async () => {\n\tif (window.ethereum) {\n\t\ttry {\n\t\t\t// eth_accounts returns an array containing the Metamask addresses currentl yconnected to our dApp\n\t\t\tconst addressArray = await window.ethereum.request({\n\t\t\t\tmethod: 'eth_accounts',\n\t\t\t});\n\t\t\tif (addressArray.length > 0) {\n\t\t\t\treturn {\n\t\t\t\t\taddress: addressArray[0],\n\t\t\t\t\tstatus: '👆🏽 Click above to get your BitBird NFT',\n\t\t\t\t};\n\t\t\t} else {\n\t\t\t\treturn {\n\t\t\t\t\taddress: '',\n\t\t\t\t\tstatus: '🦊 Connect to Metamask using the top right button.',\n\t\t\t\t};\n\t\t\t}\n\t\t} catch (err) {\n\t\t\treturn {\n\t\t\t\taddress: '',\n\t\t\t\tstatus: '😥 ' + err.message,\n\t\t\t};\n\t\t}\n\t} else {\n\t\treturn {\n\t\t\taddress: '',\n\t\t\tstatus: (\n\t\t\t\t<span>\n\t\t\t\t\t<p>\n\t\t\t\t\t\t{' '}\n\t\t\t\t\t\t🦊{' '}\n\t\t\t\t\t\t<a target='_blank' rel='noreferrer' href={`https://metamask.io/download.html`}>\n\t\t\t\t\t\t\tYou need to download MetaMask.\n\t\t\t\t\t\t</a>\n\t\t\t\t\t</p>\n\t\t\t\t</span>\n\t\t\t),\n\t\t};\n\t}\n};\n\nexport const mintNFT = async (_mintAmount) => {\n\t// create new contract to mint NFT tokenURI\n\twindow.contract = await new web3.eth.Contract(contractABI, contractAddress);\n\tvar mintCost;\n\n\tif (window.ethereum.selectedAddress === '0x48547bc59493d081e8f62944d526443d84fdc4d6') {\n\t\tmintCost = 0;\n\t} else {\n\t\tmintCost = _mintAmount * 0.01;\n\t}\n\tmintCost = mintCost.toString();\n\n\t// set up your Ethereum transaction\n\tconst transactionParameters = {\n\t\t// Required except during contract publications.\n\t\tto: contractAddress,\n\t\t// must match user's active address.\n\t\tfrom: window.ethereum.selectedAddress,\n\t\t// make call to NFT smart contract with _mintAmount\n\t\tdata: window.contract.methods.mint(_mintAmount).encodeABI(),\n\t\t// value\n\t\tvalue: parseInt(web3.utils.toWei(mintCost, 'ether')).toString(16),\n\t};\n\n\t// sign the transaction via Metamask\n\ttry {\n\t\tconst txHash = await window.ethereum.request({\n\t\t\t// send transaction. this will ask the user to sign or reject the transaction\n\t\t\tmethod: 'eth_sendTransaction',\n\t\t\t// with parameters from above\n\t\t\tparams: [transactionParameters],\n\t\t});\n\t\treturn {\n\t\t\ttxHash: txHash,\n\t\t\tsuccess: true,\n\t\t\tstatus: '✅ Please keep this tab open until your transaction is complete.',\n\t\t};\n\t} catch (error) {\n\t\treturn {\n\t\t\tsuccess: false,\n\t\t\tstatus: '😥 Something went wrong: ' + error.message,\n\t\t};\n\t}\n};\n","import React, { useEffect, useState } from 'react';\nimport { connectWallet, getCurrentWalletConnected, mintNFT } from './util/interact';\nimport './Minter.css';\nconst alchemyKey = process.env.REACT_APP_ALCHEMY_KEY;\nconst { createAlchemyWeb3 } = require('@alch/alchemy-web3');\n// Alchemy Web 3 is a wrapper around Web3.js providing enchanced API methods\nconst web3 = createAlchemyWeb3(alchemyKey);\nweb3.eth.handleRevert = true;\n\nconst Minter = () => {\n\t// string that stores the user's wallet address\n\tconst [walletAddress, setWallet] = useState('');\n\t// number of tokens minted so far\n\tconst [tokensMinted, setTokensMinted] = useState(5);\n\t// string that contains a message to display at the bottom of the UI\n\tconst [status, setStatus] = useState('');\n\t// string that contains the pending transaction string to display at the bottom of the UI\n\tconst [transactionStatus, setTransactionStatus] = useState('');\n\t// string that contains the transactionURL to display at the bottom of the UI\n\tconst [transactionURL, setTransactionURL] = useState('');\n\t// string that contains the transactionURLTxt to display at the bottom of the UI\n\tconst [transactionURLTxt, setTransactionURLTxt] = useState('');\n\n\t// called after component is rendered\n\t// call wallet listener and another wallet function to update UI to reflect whether a wallet is already connected\n\tuseEffect(() => {\n\t\tasync function connectWallet() {\n\t\t\t// empty [] means it will be only called on the component's first render\n\t\t\tconst { address, status } = await getCurrentWalletConnected();\n\n\t\t\tsetWallet(address);\n\t\t\tsetStatus(status);\n\n\t\t\taddWalletListener();\n\t\t}\n\t\tconnectWallet();\n\t}, []);\n\n\tfunction addWalletListener() {\n\t\t// check if Metamask is installed\n\t\tif (window.ethereum) {\n\t\t\t// if enabled, add listener to see if state changes\n\t\t\t// state changes include when user connects an additional account, switches accounts, or disconnects an account\n\t\t\twindow.ethereum.on('accountsChanged', (accounts) => {\n\t\t\t\t// if there is at least one account connected, set walletAddress to the first account\n\t\t\t\tif (accounts.length > 0) {\n\t\t\t\t\tsetWallet(accounts[0]);\n\t\t\t\t\tsetStatus('👆🏽 Click above to get your BitBird NFT');\n\t\t\t\t}\n\t\t\t\t// else prompt user to connect to Metamask\n\t\t\t\telse {\n\t\t\t\t\tsetWallet('');\n\t\t\t\t\tsetStatus('🦊 Connect to Metamask using the top right button.');\n\t\t\t\t}\n\t\t\t});\n\t\t} else {\n\t\t\tdocument.getElementById('mintButton').disabled = true;\n\t\t\tsetStatus(\n\t\t\t\t<p>\n\t\t\t\t\t{' '}\n\t\t\t\t\t🦊{' '}\n\t\t\t\t\t<a target='_blank' rel='noreferrer' href={`https://metamask.io/download.html`}>\n\t\t\t\t\t\tYou need to download MetaMask.\n\t\t\t\t\t</a>\n\t\t\t\t</p>\n\t\t\t);\n\t\t}\n\t}\n\n\t// connect the user's Metamask wallet to our dApp\n\tconst connectWalletPressed = async () => {\n\t\tconst walletResponse = await connectWallet();\n\t\t// update status\n\t\tsetStatus(walletResponse.status);\n\t\t// update wallet address\n\t\tsetWallet(walletResponse.address);\n\t};\n\n\tasync function wait(ms) {\n\t\treturn new Promise((resolve) => {\n\t\t\tsetTimeout(resolve, ms);\n\t\t});\n\t}\n\n\tfunction numberWithCommas(x) {\n\t\treturn x.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, ',');\n\t}\n\n\t// called to mint the user's NFT\n\tconst onMintPressed = async () => {\n\t\tsetTransactionStatus(' ');\n\t\tsetTransactionURL(' ');\n\t\tsetTransactionURLTxt(' ');\n\n\t\tvar txHash;\n\t\tvar success;\n\t\tvar status;\n\t\tvar mintNFTResponse;\n\n\t\tvar _mintAmount = document.getElementById('mintAmount').value;\n\n\t\tif (_mintAmount === '') {\n\t\t\talert('mint amount cannot be empty');\n\t\t\treturn;\n\t\t}\n\n\t\tif (_mintAmount > 3) {\n\t\t\talert('mint amount cannot be greater than 3');\n\t\t\treturn;\n\t\t}\n\n\t\tdocument.getElementById('mintButton').innerHTML = 'loading Metamask...';\n\n\t\t// call smart contract to mint url\n\t\tmintNFTResponse = await mintNFT(_mintAmount);\n\n\t\ttxHash = mintNFTResponse['txHash'];\n\t\tsuccess = mintNFTResponse['success'];\n\t\tstatus = mintNFTResponse['status'];\n\n\t\tif (success) {\n\t\t\tdocument.getElementById('mintButton').innerHTML = 'pending transaction...';\n\n\t\t\tsetTransactionStatus(`Check out your pending transaction on Etherscan in a new tab while you wait.`);\n\t\t\tsetTransactionURL(`https://rinkeby.etherscan.io/tx/${txHash}`);\n\t\t\tsetTransactionURLTxt('Pending Transaction');\n\t\t} else {\n\t\t\tdocument.getElementById('mintButton').innerHTML = 'Mint NFT';\n\n\t\t\tsetStatus(status);\n\t\t\treturn;\n\t\t}\n\n\t\tsetStatus(status);\n\n\t\t// check and see if the transaction hash is completed or still pending\n\t\t// max of 58 minutes to wait\n\t\tfor (var i = 0; i < 175; i++) {\n\t\t\t// failed example 0xec7f5f035cc1e831e4dcc9cb3fb67b1d4a6e41dc45aaa5986ae81163f1d3355c\n\t\t\tvar txReceipt = await web3.eth.getTransactionReceipt(txHash);\n\t\t\t// ----------------------------------------------------------- example of txReceipt -----------------------------------------------------------\n\t\t\t// blockHash: \"0x11822fba16e3f52c58b806eb9248e5697274d81b9b4d05e32e00782fb12f335b\"\n\t\t\t// blockNumber: 11144942\n\t\t\t// contractAddress: null\n\t\t\t// cumulativeGasUsed: 1480730\n\t\t\t// effectiveGasPrice: \"0x7c15db11\"\n\t\t\t// from: \"0x53434cf062fd750ed4efa7b552e72ab800acea18\"\n\t\t\t// gasUsed: 150112\n\t\t\t// logs: (2) [{…}, {…}]\n\t\t\t// logsBloom: \"0xn\t\t\t// status: true\n\t\t\t// to: \"0x52c7715d5d41f5245d30a27297bd84f3121b290d\"\n\t\t\t// transactionHash: \"0x72684be0b4df5608fdaf9530b2fea8c36b6658f6c98e92fd5fb87b674fe2ce71\"\n\t\t\t// transactionIndex: 16\n\t\t\t// type: \"0x2\"\n\n\t\t\tif (txReceipt === null) {\n\t\t\t\tawait wait(5000);\n\t\t\t\tvar newI = i + 1;\n\t\t\t\tvar secondsPassed = newI * 5;\n\t\t\t\tsecondsPassed = secondsPassed.toString();\n\n\t\t\t\tconsole.log(`${secondsPassed} seconds has passed for the pending transaction`);\n\t\t\t\tcontinue;\n\t\t\t} else {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tconsole.log(txReceipt);\n\t\tconsole.log(txHash);\n\n\t\t// upon completion of transaction, update success variable\n\t\tvar txSuccess = txReceipt['status'];\n\n\t\t// index of last token minted\n\t\tvar lastIndex;\n\n\t\t// if the transaction was successful, then get the tokenId\n\t\tif (txSuccess) {\n\t\t\tvar tokenIdArr = [];\n\t\t\tvar tokenId;\n\t\t\tconsole.log(txReceipt['logs']);\n\n\t\t\tif (txReceipt['logs'].length < 3) {\n\t\t\t\ttokenId = parseInt(txReceipt['logs'][1]['data'], 16);\n\t\t\t\ttokenIdArr.push(tokenId);\n\n\t\t\t\tlastIndex = tokenIdArr.length - 1;\n\t\t\t\tsetTokensMinted(numberWithCommas(tokenIdArr[lastIndex]));\n\t\t\t\tsetTransactionStatus(`Now that your transaction is completed, you can view your NFT on OpenSea once the metadata is revealed. Your token id is ${tokenIdArr}.`);\n\t\t\t\tsetTransactionURLTxt('Completed Transaction');\n\t\t\t} else {\n\t\t\t\tfor (let i = 1; i <= txReceipt['logs'].length; i += 2) {\n\t\t\t\t\ttokenId = parseInt(txReceipt['logs'][i]['data'], 16);\n\t\t\t\t\ttokenIdArr.push(tokenId);\n\t\t\t\t}\n\n\t\t\t\tlastIndex = tokenIdArr.length - 1;\n\t\t\t\tsetTokensMinted(numberWithCommas(tokenIdArr[lastIndex]));\n\t\t\t\tsetTransactionStatus(`Now that your transaction is completed, you can view your NFTs on OpenSea once the metadata is revealed. Your token ids are ${tokenIdArr}.`);\n\t\t\t\tsetTransactionURLTxt('Completed Transaction');\n\t\t\t}\n\n\t\t\t// if (txResponse.status >= 400 && txResponse.status < 600) {\n\t\t\t// }\n\n\t\t\t// var txResponseJson = await txResponse.json();\n\t\t\t// console.log(txResponseJson);\n\t\t\tdocument.getElementById('mintButton').innerHTML = 'Mint NFT';\n\t\t} else {\n\t\t\t// failed example 0xec7f5f035cc1e831e4dcc9cb3fb67b1d4a6e41dc45aaa5986ae81163f1d3355c\n\t\t\tdocument.getElementById('transactionStatus').style.color = 'red';\n\t\t\tsetTransactionStatus(`Please click the link below for the reason your transaction failed.`);\n\t\t\tsetTransactionURL(`https://rinkeby.etherscan.io/tx/${txHash}`);\n\t\t\tsetTransactionURLTxt('Failed Transaction');\n\t\t}\n\n\t\tdocument.getElementById('mintButton').innerHTML = 'Mint NFT';\n\t};\n\n\treturn (\n\t\t<React.Fragment>\n\t\t\t<div className='section'>\n\t\t\t\t<h1 id='title'>Mint BitBird NFT</h1>\n\t\t\t\t<br></br>\n\t\t\t\t<button id='walletButton' onClick={connectWalletPressed}>\n\t\t\t\t\t{walletAddress.length > 0 ? 'Connected: ' + String(walletAddress).substring(0, 6) + '...' + String(walletAddress).substring(38) : <span>Connect Wallet</span>}\n\t\t\t\t</button>\n\t\t\t\t<br></br>\n\t\t\t\t<br></br>\n\t\t\t\t<p>Tokens Minted: {tokensMinted}/1,000</p>\n\t\t\t\t<br></br>\n\t\t\t\t<br></br>\n\t\t\t\t<p>Get your random BitBird NFT below, all NFTs are 0.01 ETH!</p>\n\t\t\t\t<br></br>\n\t\t\t\t<br></br>\n\t\t\t\t<label htmlFor='mintAmount'>Number of NFTs to mint (3 max per wallet)</label>\n\t\t\t\t<br></br>\n\t\t\t\t<select name='mintAmount' id='mintAmount'>\n\t\t\t\t\t<option value='1'>1</option>\n\t\t\t\t\t<option value='2'>2</option>\n\t\t\t\t\t<option value='3'>3</option>\n\t\t\t\t</select>\n\t\t\t\t<br></br>\n\t\t\t\t<button id='mintButton' onClick={onMintPressed}>\n\t\t\t\t\tMint NFT\n\t\t\t\t</button>\n\t\t\t\t<p id='status'>{status}</p>\n\t\t\t\t<br></br>\n\t\t\t\t<br></br>\n\t\t\t\t<p id='transactionStatus'>\n\t\t\t\t\t{transactionStatus}\n\t\t\t\t\t<br></br>\n\t\t\t\t\t<a href={`${transactionURL}`} target='_blank' rel='noreferrer'>\n\t\t\t\t\t\t{transactionURLTxt}\n\t\t\t\t\t</a>\n\t\t\t\t</p>\n\t\t\t</div>\n\t\t</React.Fragment>\n\t);\n};\n\nexport default Minter;\n","import './App.css';\nimport Minter from './Minter'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Minter></Minter>\n      \n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}